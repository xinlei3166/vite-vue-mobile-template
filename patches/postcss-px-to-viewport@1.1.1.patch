diff --git a/index.js b/index.js
index 555689368cba326d0ed59e3dc71c851b540d92e6..7edf85d12a8b9de7511461cd857366c504ea9c3a 100755
--- a/index.js
+++ b/index.js
@@ -22,90 +22,105 @@ var defaults = {
   landscapeWidth: 568
 };
 
-module.exports = postcss.plugin('postcss-px-to-viewport', function (options) {
-  
+const plugin = options => {
+
   var opts = objectAssign({}, defaults, options);
 
   var pxRegex = getUnitRegexp(opts.unitToConvert);
   var satisfyPropList = createPropListMatcher(opts.propList);
   var landscapeRules = [];
-  
-  return function (css) {
-    css.walkRules(function (rule) {
-      // Add exclude option to ignore some files like 'node_modules'
-      var file = rule.source && rule.source.input.file;
-
-      if (opts.exclude && file) {
-        if (Object.prototype.toString.call(opts.exclude) === '[object RegExp]') {
-          if (isExclude(opts.exclude, file)) return;
-        } else if (Object.prototype.toString.call(opts.exclude) === '[object Array]') {
-          for (let i = 0; i < opts.exclude.length; i++) {
-            if (isExclude(opts.exclude[i], file)) return;
+
+  return {
+    postcssPlugin: 'postcss-px-to-viewport',
+    Once(css) {
+      css.walkRules(function (rule) {
+        // Add exclude option to ignore some files like 'node_modules'
+        var file = rule.source && rule.source.input.file;
+
+        if (opts.overrideOptions) {
+          opts = objectAssign({}, opts, opts.overrideOptions({ file }));
+        }
+
+        if (opts.exclude && file) {
+          if (Object.prototype.toString.call(opts.exclude) ===
+            '[object RegExp]') {
+            if (isExclude(opts.exclude, file)) return;
+          } else if (Object.prototype.toString.call(opts.exclude) ===
+            '[object Array]') {
+            for (let i = 0; i < opts.exclude.length; i++) {
+              if (isExclude(opts.exclude[i], file)) return;
+            }
+          } else {
+            throw new Error('options.exclude should be RegExp or Array.');
           }
-        } else {
-          throw new Error('options.exclude should be RegExp or Array.');
         }
-      }
-      
-      if (blacklistedSelector(opts.selectorBlackList, rule.selector)) return;
 
-      if (opts.landscape && !rule.parent.params) {
-        var landscapeRule = rule.clone().removeAll();
+        if (blacklistedSelector(opts.selectorBlackList, rule.selector)) return;
+
+        if (opts.landscape && !rule.parent.params) {
+          var landscapeRule = rule.clone().removeAll();
+
+          rule.walkDecls(function (decl) {
+            if (decl.value.indexOf(opts.unitToConvert) === -1) return;
+            if (!satisfyPropList(decl.prop)) return;
 
-        rule.walkDecls(function(decl) {
+            landscapeRule.append(decl.clone({
+              value: decl.value.replace(pxRegex,
+                createPxReplace(opts, opts.landscapeUnit, opts.landscapeWidth))
+            }));
+          });
+
+          if (landscapeRule.nodes.length > 0) {
+            landscapeRules.push(landscapeRule);
+          }
+        }
+
+        if (!validateParams(rule.parent.params, opts.mediaQuery)) return;
+
+        rule.walkDecls(function (decl, i) {
           if (decl.value.indexOf(opts.unitToConvert) === -1) return;
           if (!satisfyPropList(decl.prop)) return;
-          
-          landscapeRule.append(decl.clone({
-            value: decl.value.replace(pxRegex, createPxReplace(opts, opts.landscapeUnit, opts.landscapeWidth))
-          }));
-        });
-        
-        if (landscapeRule.nodes.length > 0) {
-          landscapeRules.push(landscapeRule); 
-        }
-      }
 
-      if (!validateParams(rule.parent.params, opts.mediaQuery)) return;
-      
-      rule.walkDecls(function(decl, i) {
-        if (decl.value.indexOf(opts.unitToConvert) === -1) return;
-        if (!satisfyPropList(decl.prop)) return;
-
-        var unit;
-        var size;
-        var params = rule.parent.params;
-        
-        if (opts.landscape && params && params.indexOf('landscape') !== -1) {
-          unit = opts.landscapeUnit;
-          size = opts.landscapeWidth;
-        } else {
-          unit = getUnit(decl.prop, opts);
-          size = opts.viewportWidth;
-        }
-        
-        var value = decl.value.replace(pxRegex, createPxReplace(opts, unit, size));
-        
-        if (declarationExists(decl.parent, decl.prop, value)) return;
-        
-        if (opts.replace) {
-          decl.value = value;
-        } else {
-          decl.parent.insertAfter(i, decl.clone({ value: value }));
-        }
-      });
-    });
-    
-    if (landscapeRules.length > 0) {
-      var landscapeRoot = new postcss.atRule({ params: '(orientation: landscape)', name: 'media' });
-      
-      landscapeRules.forEach(function(rule) {
-        landscapeRoot.append(rule);
+          var unit;
+          var size;
+          var params = rule.parent.params;
+
+          if (opts.landscape && params && params.indexOf('landscape') !== -1) {
+            unit = opts.landscapeUnit;
+            size = opts.landscapeWidth;
+          } else {
+            unit = getUnit(decl.prop, opts);
+            size = opts.viewportWidth;
+          }
+
+          var value = decl.value.replace(pxRegex,
+            createPxReplace(opts, unit, size));
+
+          if (declarationExists(decl.parent, decl.prop, value)) return;
+
+          if (opts.replace) {
+            decl.value = value;
+          } else {
+            decl.parent.insertAfter(i, decl.clone({ value: value }));
+          }
+        });
       });
-      css.append(landscapeRoot);
+
+      if (landscapeRules.length > 0) {
+        var landscapeRoot = new postcss.atRule(
+          { params: '(orientation: landscape)', name: 'media' });
+
+        landscapeRules.forEach(function (rule) {
+          landscapeRoot.append(rule);
+        });
+        css.append(landscapeRoot);
+      }
     }
   };
-});
+};
+
+plugin.postcss = true
+module.exports = plugin
 
 function getUnit(prop, opts) {
   return prop.indexOf('font') === -1 ? opts.viewportUnit : opts.fontViewportUnit;
diff --git a/package.json b/package.json
index 3add11aa904397f9781e23f367468ac6f82d31b0..c2d4392eb414c78f6c6bcef7849663114604c67e 100755
--- a/package.json
+++ b/package.json
@@ -33,5 +33,10 @@
   "dependencies": {
     "object-assign": ">=4.0.1",
     "postcss": ">=5.0.2"
+  },
+  "pnpm": {
+    "patchedDependencies": {
+      "postcss-px-to-viewport@1.1.1": "patches/postcss-px-to-viewport@1.1.1.patch"
+    }
   }
 }
diff --git a/patches/postcss-px-to-viewport@1.1.1.patch b/patches/postcss-px-to-viewport@1.1.1.patch
new file mode 100644
index 0000000000000000000000000000000000000000..3133dab5cfb7d0b26bce2ca9374e642e17f63ffd
--- /dev/null
+++ b/patches/postcss-px-to-viewport@1.1.1.patch
@@ -0,0 +1,15 @@
+diff --git a/index.js b/index.js
+index 555689368cba326d0ed59e3dc71c851b540d92e6..8371d3e2d2708cdb1a73d96171ba9003ac21540e 100755
+--- a/index.js
++++ b/index.js
+@@ -35,6 +35,10 @@ module.exports = postcss.plugin('postcss-px-to-viewport', function (options) {
+       // Add exclude option to ignore some files like 'node_modules'
+       var file = rule.source && rule.source.input.file;
+ 
++      if (opts.overrideOptions) {
++        opts = objectAssign({}, opts, opts.overrideOptions({ file }));
++      }
++
+       if (opts.exclude && file) {
+         if (Object.prototype.toString.call(opts.exclude) === '[object RegExp]') {
+           if (isExclude(opts.exclude, file)) return;